// <auto-generated />
using System;
using AlocaGFT.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AlocaGFT.Migrations
{
    [DbContext(typeof(AlocaGFTDbContext))]
    partial class AlocaGFTDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AlocaGFT.Models.Alocacao", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("applicationUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("data_operacao")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("funcionarioid")
                        .HasColumnType("bigint");

                    b.Property<int>("operacao")
                        .HasColumnType("int");

                    b.Property<long>("vagaid")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("funcionarioid");

                    b.HasIndex("vagaid");

                    b.ToTable("Alocacoes");
                });

            modelBuilder.Entity("AlocaGFT.Models.Cargo", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("data_alteracao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.Property<string>("nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.ToTable("Cargos");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            data_criacao = new DateTime(2020, 11, 12, 20, 49, 17, 263, DateTimeKind.Local).AddTicks(4003),
                            level = 0,
                            nome = "Starter",
                            status = true
                        });
                });

            modelBuilder.Entity("AlocaGFT.Models.Endereco", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("bairro")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("cep")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("cidade")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("complemento")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("data_alteracao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("latitude")
                        .HasColumnType("float");

                    b.Property<string>("logradouro")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float>("longitude")
                        .HasColumnType("float");

                    b.Property<int>("numero")
                        .HasColumnType("int");

                    b.Property<bool?>("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("uf")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("Enderecos");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            bairro = "Alphaville Industrial",
                            cep = "06454-000",
                            cidade = "Barueri",
                            data_criacao = new DateTime(2020, 11, 12, 20, 49, 17, 259, DateTimeKind.Local).AddTicks(6567),
                            latitude = -23.500498f,
                            logradouro = "Alameda Rio Negro",
                            longitude = -46.850864f,
                            numero = 585,
                            status = true,
                            uf = "SP"
                        },
                        new
                        {
                            id = 2L,
                            bairro = "Jardim Santa Rosália",
                            cep = "18095-450",
                            cidade = "Sorocaba",
                            data_criacao = new DateTime(2020, 11, 12, 20, 49, 17, 262, DateTimeKind.Local).AddTicks(5016),
                            latitude = -23.487108f,
                            logradouro = "Av. São Francisco",
                            longitude = -47.444813f,
                            numero = 98,
                            status = true,
                            uf = "SP"
                        });
                });

            modelBuilder.Entity("AlocaGFT.Models.Funcionario", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("cargoid")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("data_alteracao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("gftid")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("inicio_wa")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("matricula")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("termino_wa")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("vagaid")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("cargoid");

                    b.HasIndex("gftid");

                    b.HasIndex("vagaid");

                    b.ToTable("Funcionarios");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            cargoid = 1L,
                            data_criacao = new DateTime(2020, 11, 12, 20, 49, 17, 265, DateTimeKind.Local).AddTicks(8082),
                            gftid = 1L,
                            inicio_wa = new DateTime(2020, 11, 12, 20, 49, 17, 265, DateTimeKind.Local).AddTicks(9501),
                            matricula = "N412302",
                            nome = "Lucas Camargo",
                            status = true,
                            termino_wa = new DateTime(2020, 11, 27, 20, 49, 17, 265, DateTimeKind.Local).AddTicks(9897)
                        });
                });

            modelBuilder.Entity("AlocaGFT.Models.Funcionario_Tecnologia", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("funcionarioid")
                        .HasColumnType("bigint");

                    b.Property<long>("tecnologiaid")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("funcionarioid");

                    b.HasIndex("tecnologiaid");

                    b.ToTable("Funcionarios_Tecnologias");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            funcionarioid = 1L,
                            tecnologiaid = 1L
                        });
                });

            modelBuilder.Entity("AlocaGFT.Models.Gft", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("data_alteracao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("enderecoid")
                        .HasColumnType("bigint");

                    b.Property<string>("nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("telefone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.HasIndex("enderecoid");

                    b.ToTable("Gfts");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            data_criacao = new DateTime(2020, 11, 12, 20, 49, 17, 262, DateTimeKind.Local).AddTicks(8971),
                            enderecoid = 1L,
                            nome = "GFT Alphaville",
                            status = true,
                            telefone = "(11)2176-3253"
                        },
                        new
                        {
                            id = 2L,
                            data_criacao = new DateTime(2020, 11, 12, 20, 49, 17, 263, DateTimeKind.Local).AddTicks(1444),
                            enderecoid = 2L,
                            nome = "GFT Sorocaba",
                            status = true,
                            telefone = "(11)2176-3253"
                        });
                });

            modelBuilder.Entity("AlocaGFT.Models.Tecnologia", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("data_alteracao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("imageName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.HasKey("id");

                    b.ToTable("Tecnologias");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            data_criacao = new DateTime(2020, 11, 12, 20, 49, 17, 263, DateTimeKind.Local).AddTicks(9338),
                            imageName = "dotnet-icon.png",
                            nome = "DotNet",
                            status = true
                        },
                        new
                        {
                            id = 2L,
                            data_criacao = new DateTime(2020, 11, 12, 20, 49, 17, 264, DateTimeKind.Local).AddTicks(1394),
                            imageName = "java-icon.png",
                            nome = "Java",
                            status = true
                        },
                        new
                        {
                            id = 3L,
                            data_criacao = new DateTime(2020, 11, 12, 20, 49, 17, 264, DateTimeKind.Local).AddTicks(1507),
                            imageName = "swift-icon.png",
                            nome = "Swift",
                            status = true
                        });
                });

            modelBuilder.Entity("AlocaGFT.Models.Vaga", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("abertura")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("codigoVaga")
                        .HasColumnName("codigo_vaga")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("data_alteracao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("descricao")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("homeOffice")
                        .HasColumnName("home_office")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("projeto")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("qtdVaga")
                        .HasColumnName("qtd_vaga")
                        .HasColumnType("int");

                    b.Property<bool?>("status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.HasKey("id");

                    b.ToTable("Vagas");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            abertura = new DateTime(2020, 11, 12, 20, 49, 17, 264, DateTimeKind.Local).AddTicks(9007),
                            codigoVaga = "#ITAU-2020-11",
                            data_criacao = new DateTime(2020, 11, 12, 20, 49, 17, 264, DateTimeKind.Local).AddTicks(8189),
                            descricao = "Desenvolvedor Java Senior",
                            homeOffice = true,
                            projeto = "Itau",
                            qtdVaga = 2,
                            status = true
                        },
                        new
                        {
                            id = 2L,
                            abertura = new DateTime(2021, 11, 12, 20, 49, 17, 265, DateTimeKind.Local).AddTicks(2052),
                            codigoVaga = "#SANTANDER-2021-11",
                            data_criacao = new DateTime(2020, 11, 12, 20, 49, 17, 265, DateTimeKind.Local).AddTicks(2013),
                            descricao = "Desenvolvedor IOS",
                            homeOffice = false,
                            projeto = "Santander",
                            qtdVaga = 1,
                            status = true
                        });
                });

            modelBuilder.Entity("AlocaGFT.Models.Vaga_Tecnologia", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("tecnologiaid")
                        .HasColumnType("bigint");

                    b.Property<long>("vagaid")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("tecnologiaid");

                    b.HasIndex("vagaid");

                    b.ToTable("Vagas_Tecnologias");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            tecnologiaid = 2L,
                            vagaid = 1L
                        },
                        new
                        {
                            id = 2L,
                            tecnologiaid = 3L,
                            vagaid = 2L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AlocaGFT.Models.Alocacao", b =>
                {
                    b.HasOne("AlocaGFT.Models.Funcionario", "funcionario")
                        .WithMany()
                        .HasForeignKey("funcionarioid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlocaGFT.Models.Vaga", "vaga")
                        .WithMany()
                        .HasForeignKey("vagaid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlocaGFT.Models.Funcionario", b =>
                {
                    b.HasOne("AlocaGFT.Models.Cargo", "cargo")
                        .WithMany()
                        .HasForeignKey("cargoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlocaGFT.Models.Gft", "gft")
                        .WithMany()
                        .HasForeignKey("gftid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlocaGFT.Models.Vaga", "vaga")
                        .WithMany()
                        .HasForeignKey("vagaid");
                });

            modelBuilder.Entity("AlocaGFT.Models.Funcionario_Tecnologia", b =>
                {
                    b.HasOne("AlocaGFT.Models.Funcionario", "funcionario")
                        .WithMany()
                        .HasForeignKey("funcionarioid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlocaGFT.Models.Tecnologia", "tecnologia")
                        .WithMany()
                        .HasForeignKey("tecnologiaid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlocaGFT.Models.Gft", b =>
                {
                    b.HasOne("AlocaGFT.Models.Endereco", "endereco")
                        .WithMany()
                        .HasForeignKey("enderecoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlocaGFT.Models.Vaga_Tecnologia", b =>
                {
                    b.HasOne("AlocaGFT.Models.Tecnologia", "tecnologia")
                        .WithMany()
                        .HasForeignKey("tecnologiaid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlocaGFT.Models.Vaga", "vaga")
                        .WithMany()
                        .HasForeignKey("vagaid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
