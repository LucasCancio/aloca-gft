// <auto-generated />
using System;
using AlocaGFT.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AlocaGFT.Migrations
{
    [DbContext(typeof(AlocaGFTDbContext))]
    [Migration("20201109120620_ModificandoVaga")]
    partial class ModificandoVaga
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AlocaGFT.Models.Alocacao", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("data_alocado")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("funcionarioid")
                        .HasColumnType("int");

                    b.Property<string>("usuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int?>("vagaid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("funcionarioid");

                    b.HasIndex("usuarioId");

                    b.HasIndex("vagaid");

                    b.ToTable("Alocacoes");
                });

            modelBuilder.Entity("AlocaGFT.Models.Cargo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("data_alteracao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.Property<string>("nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("AlocaGFT.Models.Endereco", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("bairro")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("cep")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("cidade")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("complemento")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("data_alteracao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("latitude")
                        .HasColumnType("float");

                    b.Property<string>("logradouro")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float>("longitude")
                        .HasColumnType("float");

                    b.Property<int>("numero")
                        .HasColumnType("int");

                    b.Property<bool?>("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("uf")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("AlocaGFT.Models.Funcionario", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("cargoid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("data_alteracao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("gftid")
                        .HasColumnType("int");

                    b.Property<DateTime>("inicio_wa")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("matricula")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("termino_wa")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("vagaid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("cargoid");

                    b.HasIndex("gftid");

                    b.HasIndex("vagaid");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("AlocaGFT.Models.Funcionario_Tecnologia", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("funcionarioid")
                        .HasColumnType("int");

                    b.Property<int?>("tecnologiaid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("funcionarioid");

                    b.HasIndex("tecnologiaid");

                    b.ToTable("Funcionarios_Tecnologias");
                });

            modelBuilder.Entity("AlocaGFT.Models.Gft", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("data_alteracao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("enderecoid")
                        .HasColumnType("int");

                    b.Property<string>("nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("telefone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.HasIndex("enderecoid");

                    b.ToTable("Gfts");
                });

            modelBuilder.Entity("AlocaGFT.Models.Tecnologia", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("data_alteracao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("imageName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.HasKey("id");

                    b.ToTable("Tecnologias");
                });

            modelBuilder.Entity("AlocaGFT.Models.Vaga", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("abertura")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("codigoVaga")
                        .HasColumnName("codigo_vaga")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("data_alteracao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("descricao")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("enderecoid")
                        .HasColumnType("int");

                    b.Property<bool>("homeOffice")
                        .HasColumnName("home_office")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("projeto")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("qtdVaga")
                        .HasColumnName("qtd_vaga")
                        .HasColumnType("int");

                    b.Property<bool?>("status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.HasKey("id");

                    b.HasIndex("enderecoid");

                    b.ToTable("Vagas");
                });

            modelBuilder.Entity("AlocaGFT.Models.Vaga_Tecnologia", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("tecnologiaid")
                        .HasColumnType("int");

                    b.Property<int?>("vagaid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("tecnologiaid");

                    b.HasIndex("vagaid");

                    b.ToTable("Vagas_Tecnologias");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AlocaGFT.Models.Usuario", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.Property<string>("nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasDiscriminator().HasValue("Usuario");
                });

            modelBuilder.Entity("AlocaGFT.Models.Alocacao", b =>
                {
                    b.HasOne("AlocaGFT.Models.Funcionario", "funcionario")
                        .WithMany()
                        .HasForeignKey("funcionarioid");

                    b.HasOne("AlocaGFT.Models.Usuario", "usuario")
                        .WithMany()
                        .HasForeignKey("usuarioId");

                    b.HasOne("AlocaGFT.Models.Vaga", "vaga")
                        .WithMany()
                        .HasForeignKey("vagaid");
                });

            modelBuilder.Entity("AlocaGFT.Models.Funcionario", b =>
                {
                    b.HasOne("AlocaGFT.Models.Cargo", "cargo")
                        .WithMany()
                        .HasForeignKey("cargoid");

                    b.HasOne("AlocaGFT.Models.Gft", "gft")
                        .WithMany()
                        .HasForeignKey("gftid");

                    b.HasOne("AlocaGFT.Models.Vaga", "vaga")
                        .WithMany()
                        .HasForeignKey("vagaid");
                });

            modelBuilder.Entity("AlocaGFT.Models.Funcionario_Tecnologia", b =>
                {
                    b.HasOne("AlocaGFT.Models.Funcionario", "funcionario")
                        .WithMany()
                        .HasForeignKey("funcionarioid");

                    b.HasOne("AlocaGFT.Models.Tecnologia", "tecnologia")
                        .WithMany()
                        .HasForeignKey("tecnologiaid");
                });

            modelBuilder.Entity("AlocaGFT.Models.Gft", b =>
                {
                    b.HasOne("AlocaGFT.Models.Endereco", "endereco")
                        .WithMany()
                        .HasForeignKey("enderecoid");
                });

            modelBuilder.Entity("AlocaGFT.Models.Vaga", b =>
                {
                    b.HasOne("AlocaGFT.Models.Endereco", "endereco")
                        .WithMany()
                        .HasForeignKey("enderecoid");
                });

            modelBuilder.Entity("AlocaGFT.Models.Vaga_Tecnologia", b =>
                {
                    b.HasOne("AlocaGFT.Models.Tecnologia", "tecnologia")
                        .WithMany()
                        .HasForeignKey("tecnologiaid");

                    b.HasOne("AlocaGFT.Models.Vaga", "vaga")
                        .WithMany()
                        .HasForeignKey("vagaid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
